service: orch-step1-plugin-pre-post

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  stage: ${opt:stage, 'dev'}

  #
  # Gives functions access to update the orchestrator status table
  #
  environment:
    orchestratorStatusTable: ${self:custom.core.tables.status.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource:
        - ${self:custom.core.tables.status.arn}

custom:
  core:
    stack: ${opt:core-stack, 'orchestrator'}
    tables:
      status:
        name:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-name
        arn:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-arn
        stream:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-stream-arn

  steps:
    Step1:
      stack: orchestrator-Step1-${self:provider.stage}
      pre:
        lambda:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-pre-sync
        role:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-pre-process-name
        addRole:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-pre-process-add-name
        arn:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-pre-processing
      post:
        lambda:
            Fn::ImportValue: ${self:custom.steps.Step1.stack}-post-sync
        role:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-post-process-name
        addRole:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-post-process-add-name
        arn:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-post-processing

functions:
  prePlugin:
    handler: plugin.plugin
    environment:
      stage: pre-Activity
    events:
      - sns:
          topicName: pluginSnsSubscription # This value is used in cloudformation but not to identify the sns topic if arn is present
          arn: ${self:custom.steps.Step1.pre.arn}

  postPlugin:
    handler: plugin.plugin
    environment:
      stage: post-Activity
    events:
      - sns:
          topicName: pluginSnsSubscription # This value is used in cloudformation but not to identify the sns topic if arn is present
          arn: ${self:custom.steps.Step1.post.arn}

resources:
  Resources:
    pluginPreSyncActivityPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-step1-pre-plugin
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - lambda:InvokeFunction
              Resource:
                Fn::GetAtt:
                  - PrePluginLambdaFunction # Capitalize the first letter and add LambdaFunction to the end of the function name
                  - Arn
        Roles: 
          - ${self:custom.steps.Step1.pre.role}

    pluginPostSyncActivityPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-step1-post-plugin
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - lambda:InvokeFunction
              Resource:
                Fn::GetAtt:
                  - PostPluginLambdaFunction # Capitalize the first letter and add LambdaFunction to the end of the function name
                  - Arn
        Roles: 
          - ${self:custom.steps.Step1.post.role}