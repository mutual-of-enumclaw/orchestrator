service: orch-step1-sample

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  
  #
  # Gives functions access to update the orchestrator status table
  #
  environment:
    orchestratorStatusTable: ${self:custom.core.tables.status.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource:
        - ${self:custom.core.tables.status.arn}

custom:
  core:
    stack: ${opt:core-stack, 'orchestrator'}
    tables:
      status:
        name:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-name
        arn:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-arn
        stream:
          Fn::ImportValue: ${self:custom.core.stack}-${self:provider.stage}-status-stream-arn

  steps:
    Step1:
      stack: ${opt:activity-prefix, 'orchestrator'}-Step1-${self:provider.stage}
      parallel:
        arn:
          Fn::ImportValue: ${self:custom.steps.Step1.stack}-parallel-processing

functions:
  plugin:
    handler: plugin.plugin
    events:
      - sns:
          topicName: pluginSnsSubscription # This value is used in cloudformation but not to identify the sns topic if arn is present
          arn: ${self:custom.steps.Step1.parallel.arn}