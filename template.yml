Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: nodejs12.x
    CodeUri: src
    MemorySize: 128
    Timeout: 30
    Layers:
      - !Ref Library

Resources:
  RootStackParamStore:
    Type: AWS::SSM::Parameter
    Properties:
      Name: 
        !Sub 
          - /${EnvironmentTagName}/orchestrator/stacks/${parmStack}/base
          - parmStack: !Join ['', !Split ['-', !Ref StackTagName]]
      Value: !Ref AWS::StackName
      Type: String

  updateStatus:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-updateStatus
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: updateStatus
      Handler: dist/handleSummary.updateActivityStatus
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource:
                - !GetAtt StatusTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !GetAtt PluginTable.Arn
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
              Resource: '*'
      Events:
        StatusTable:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt StatusTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      Environment:
        Variables:
          pluginTable: !Ref PluginTable
          statusTable: !Ref StatusTable
    Metadata:
      RuntimeOption: typescript


  initializeActivities:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-initializeActivities
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: initializeActivities
      Handler: dist/initializeActivities.initialize
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
              Resource: !GetAtt StatusTable.Arn
      Environment:
        Variables:
          statusTable: !Ref StatusTable
    Metadata:
      RuntimeOption: typescript

  PluginTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
          - AttributeName: orchestratorId
            KeyType: HASH
          - AttributeName: subscriptionArn
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: orchestratorId
            AttributeType: S
          - AttributeName: subscriptionArn
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: !Sub ${AWS::StackName}-plugin
        Tags:
          - Key: Role
            Value: Configuration
          - Key: NPI
            Value: "true"

  StatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: workflow
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: workflow
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: !Sub ${AWS::StackName}-status
        Tags:
          - Key: Role
            Value: Status
          - Key: NPI
            Value: "true"

  Library:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-library
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Layer ${ResourceName}
        - ResourceName: library
      ContentUri: library
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: nodejs12.x

  LibraryParamStore:
    Type: AWS::SSM::Parameter
    Properties:
      Name: 
        !Sub 
          - /${EnvironmentTagName}/orchestrator/stacks/${parmStack}/layer
          - parmStack: !Join ['', !Split ['-', !Ref StackTagName]]
      Value: !Ref Library
      Type: String
  
  LibraryLayerReference:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-library-layer-ref
      Handler: /src/dist/libraryLayerReference.resourceHandler
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: LibraryLayerReference
      Environment:
        Variables:
          layerArn: !Ref Library
      
  metrics:
    Type: AWS::Serverless::Application
    Properties:
      Location: metrics/template.yml
      Parameters:
        StackTagName: !Sub ${AWS::StackName}-metrics
        EnvironmentTagName: !Ref EnvironmentTagName
        StatusTableName: !Ref StatusTable
        StatusTableArn: !GetAtt StatusTable.Arn
        StatusTableStreamArn: !GetAtt StatusTable.StreamArn
        OrchestratorLayerArn: !Ref Library
  
  
  
  ##
  ## Start Activities Section
  ##

  activityStep1:
    Type: AWS::Serverless::Application
    Properties:
      Location: activity/template.yml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        Name: "Step1"
        EnvironmentTagName: !Ref EnvironmentTagName
        StatusTableName: !Ref StatusTable
        StatusTableArn: !GetAtt StatusTable.Arn
        PluginTableName: !Ref PluginTable
        PluginTableArn: !GetAtt PluginTable.Arn
        OrchestratorLayerArn: !Ref Library
    

  activityStep2:
    Type: AWS::Serverless::Application
    Properties:
      Location: activity/template.yml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        Name: "Step2"
        EnvironmentTagName: !Ref EnvironmentTagName
        StatusTableName: !Ref StatusTable
        StatusTableArn: !GetAtt StatusTable.Arn
        PluginTableName: !Ref PluginTable
        PluginTableArn: !GetAtt PluginTable.Arn
        OrchestratorLayerArn: !Ref Library
    

  activityStep3:
    Type: AWS::Serverless::Application
    Properties:
      Location: activity/template.yml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        Name: "Step3"
        EnvironmentTagName: !Ref EnvironmentTagName
        StatusTableName: !Ref StatusTable
        StatusTableArn: !GetAtt StatusTable.Arn
        PluginTableName: !Ref PluginTable
        PluginTableArn: !GetAtt PluginTable.Arn
        OrchestratorLayerArn: !Ref Library
    

  ##
  ## End Activities Section
  ##

Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)

Outputs:
    DynamoDbPluginTableName:
      Value: 
        Ref: PluginTable
      Export:
        Name: !Sub "${AWS::StackName}-plugin-name"

    DynamoDbPluginTableArn:
      Value: 
        Fn::GetAtt: 
          - PluginTable
          - Arn
      Export:
        Name: !Sub "${AWS::StackName}-plugin-arn"

    DynamoDbStatusTableName:
      Value: 
        Ref: StatusTable
      Export:
        Name: !Sub "${AWS::StackName}-status-name"

    DynamoDbStatusTableArn:
      Value: 
        Fn::GetAtt: 
          - StatusTable
          - Arn
      Export:
        Name: !Sub "${AWS::StackName}-status-arn"

    DynamoDbStatusTableStreamArn:
      Value:
        Fn::GetAtt:
          - StatusTable
          - StreamArn
      Export:
        Name: !Sub "${AWS::StackName}-status-stream-arn"

    InitailizeActivities:
      Value: !GetAtt initializeActivities.Arn
      Export:
        Name: !Sub "${AWS::StackName}-init-activites"

    Layer:
      Value: !Ref Library
      Export:
        Name: !Sub "${AWS::StackName}-layer"

    LibraryLayerReference:
      Value: !GetAtt LibraryLayerReference.Arn
      Export:
        Name: !Sub "${AWS::StackName}-layer-resource"
